esphome:
  name: rc-car

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API

ota:
  password: "xxxxxxxxxxxxxxx"

wifi:
  ssid: YOUR_WIFI_NAME
  password: YOUR_PASSWORD

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Rc-Car Fallback Hotspot"
    password: "YOUR_PASSWORD"
    
# 192.168...

#web_server:
#  port: 80

captive_portal:

#L298N Motor comtroller, all switch at 100% speed:
switch:
  - platform: gpio
    pin: GPIO15
    name: "input1"
    id: input1
  - platform: gpio
    pin: GPIO14
    name: "input2"
    id: input2
  - platform: gpio
    pin: GPIO12
    name: "input3"
    id: input3
  - platform: gpio
    pin: GPIO13
    name: "input4"
    id: input4

#To do in Home assistnt Scripts:
#  - id: rc_car_forward
#    then
#      - switch.turn_off: input1
#      - switch.turn_off: input3
#      - delay: 300ms
#      - switch.turn_on: input2
#      - switch.turn_on: input4

#  - id: rc_car_backward
#    then:
#      - switch.turn_off: input2
#      - switch.turn_off: input4
#      - delay: 300ms
#      - switch.turn_on: input1
#      - switch.turn_on: input3

#  - id: rc_car_left_rotation
#    then:
#      - switch.turn_off: input2
#      - switch.turn_off: input3
#      - delay: 300ms
#      - switch.turn_on: input1
#      - switch.turn_on: input4
# or:
#  - id: rc_car_turn_left
#    then:
#      - switch.turn_off: input2
#      - switch.turn_off: input3
#      - switch.turn_off: input1
#      - delay: 300ms
#      - switch.turn_on: input4

#  - id: rc_car_right_rotation
#    then:
#      - switch.turn_off: input1
#      - switch.turn_off: input4 
#      - delay: 300ms
#      - switch.turn_on: input3
#      - switch.turn_on: input2
# or:
#  - id: rc_car_turn_right
#    then:
#      - switch.turn_off: input4
#      - switch.turn_off: input3
#      - switch.turn_off: input1
#      - delay: 300ms
#      - switch.turn_on: input2

#  - id: rc_car_stop
#    then:
#      - switch.turn_off: input1
#      - switch.turn_off: input2
#      - switch.turn_off: input3
#      - switch.turn_off: input4

# To control servo motors, must in Home Assistant do a slider (min -100 max 100):
servo:
  - id: servo_x
    output: pwm_output
  - id: servo_y
    output: pwm_output2
    
api:
  services:
    - service: control_servo_x
      variables:
        level: float
      then:
        - servo.write:
            id: servo_x
            level: !lambda 'return level / 100.0;'
    - service: control_servo_y
      variables:
        level: float
      then:
        - servo.write:
            id: servo_y
            level: !lambda 'return level / 100.0;'
            
#Optional led lights
light:
  - platform: binary
    name: "Leds camera"
    output: leds_cam
#  - platform: binary
#    name: "Leds frontales"
#    output: leds_front
#  - platform: binary
#    name: "Leds detrás"
#    output: leds_back
#  - platform: binary
#    name: "Led marcha atrás"
#    output: led_backward
#  - platform: binary
#    name: "Leds freno"
#    output: leds_brake
#  - platform: binary
#    name: "Leds intermitente der"
#    output: leds_turn_right
#  - platform: binary
#    name: "Leds intermitente izq"
#    output: leds_turn_left

#Optional Battery Sensor now it don't work for me, must know the correct code
sensor:
  - platform: adc
    pin: A0
    id: "LIION"
    name: "A0 Voltage x 4.2"
    update_interval: 15s
    accuracy_decimals: 3
    filters:
      - multiply: 4.2
  - platform: template
    name: "D1003_Battery_Voltage"
    unit_of_measurement: 'V'
    update_interval: 15s
    accuracy_decimals: 2
    lambda: |-
      return (id(LIION).state);
  - platform: template
    name: "D1003_Battery_Percentage"
    unit_of_measurement: '%'
    update_interval: 15s
    accuracy_decimals: 0
    lambda: |-
      return ((id(LIION).state-3) /1.2 * 100.00);

#The id must be the same as output before and here comes the servo and light jumper wire pins
output:
  - id: leds_cam
    platform: gpio
    pin: GPIO2
#  - id: leds_front
#    platform: gpio
#    pin: GPIO15
#  - id: leds_back
#    platform: gpio
#    pin: GPIO10
#  - id: led_backward
#    platform: gpio
#    pin: GPIO9
#  - id: leds_brake
#    platform: gpio
#    pin: GPIO3
#  - id: leds_turn_right
#    platform: gpio
#    pin: GPIO1
#  - id: leds_turn_left
#    platform: gpio
#    pin: GPIO9
  - platform: esp8266_pwm
    id: pwm_output
    pin: GPIO5
    frequency: 50 Hz
  - platform: esp8266_pwm
    id: pwm_output2
    pin: GPIO4
    frequency: 50 Hz
#  - platform: gpio
#    pin: D1
#    id: direction_pin
#  - platform: esp8266_pwm  # or ledc if on ESP32
#    pin: D2
#    id: speed_pin

# In some call:
# Set to forward dir
#  - output.turn_on: direction_pin
# Turn on motor
#  - output.set_level:
#      id: speed_pin
#      level: 100%
# Let motor drive for a big
#  - delay: 1s
# Turn off motor
#  - output.turn_off: speed_pin
# Repeat for Oóther direction, this time with turning off the direction pin
 
